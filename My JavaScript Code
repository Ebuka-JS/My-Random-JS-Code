import { ArcRotateCamera, Engine, Scene, Vector3 } from "@babylonjs/core"

enum State { START = 0, MAIN_MENU = 1, SOLO_MENU = 2, MULTI_MENU = 3, OPTIONS = 4, GAME_SOLO = 5
GAME_MULTI = 6, LOSE = 7, WIN = 8}

class GameCode {

//Private variables for the canvas, scene and engine
    private _canvas: HTMLElement
    private _scene: Scene
    private _engine: Engine

//Private variable for the State machine

    private _state: number = 0;

    constructor() {
        this.createCanvas()
        const engine = new Engine(canvas, true) 
        const scene = new Scene(engine)
        
        engine.runRenderLoop(() => {
            scene.render();
        })
    }
}

private _createCanvas(): void {
    document.documentElement.style["overflow"] = "hidden"
    document.documentElement.style.overflow = "hidden"
    document.documentElement.style.width = "100%"
    document.documentElement.style.height = "100%"
    document.documentElement.style.margin = "0"
    document.documentElement.style.padding = "0"
    document.body.style.overflow = "hidden"
    document.body.style.width = "100%"
    document.body.style.height = "100%"
    document.body.style.margin = "0"
    document.body.style.padding = "0"

    this._canvas = documentcreateElement("canvas")
    this._canvas.style.width = "100%"
    this._canvas.style.height = "100%"
    this._canvas.id = "canvas"
    document.appendChild(this._canvas)
}

new Game();

private main() void {
    this.start();
    this._engine.runRenderLoop(() => {
        switch(this._state) {
            case State.START:
                this._scene.render();
                default: break;
        }
        this._sceneRender();
    });
}
 private start() {
    const camera: ArcRotateCamera = new ArcRotateCamera("camera", Math.PI, Math.PI, 1, Vector3.Zero());
    camera.attachControl(true);
 }
